import logging

from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from keyboards.inline.choice_buttons import run_choice, url_movies, running
from keyboards.default import menu
from state.state import PageUpdate
from api.kp_cloud_api import FinderId
from browser.send_movie import SendMovie
from loader import dp, bot


@dp.message_handler(Command("start"), state="*")
async def start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=menu)


@dp.message_handler(Text(equals=["–ü–æ–∏—Å–∫ –ø–æ ID üîé"]), state="*")
async def keyboards(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É id –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞
    :param message: –ø–æ–ª—É—á–∞–µ—Ç id
    :param state: –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    text = '–í–≤–µ–¥–∏—Ç–µ ID –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞'
    await message.answer(text=text)
    await PageUpdate.json.set()


@dp.message_handler(state=PageUpdate.json)
async def find_movie(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID, –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
    :param message: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
    :param state: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    movie_data = FinderId(message.text, False).get_movie()
    await state.update_data(json=movie_data)
    try:
        info = f'–§–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏: {movie_data["title"]} \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {movie_data["description"]} ' \
               f'\r\n–¢—Ä–µ–π–ª–µ—Ä: {movie_data["trailer"]} \r\n–ü–æ—Å—Ç–µ—Ä: {movie_data["poster"]}'
    except TypeError:
        info = '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    if not info == '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ':
        await message.answer(text=info, reply_markup=run_choice)
    else:
        await message.answer(text=info)
    await PageUpdate.json.set()


@dp.callback_query_handler(text_contains="add_text", state="*")
async def run_sender(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞
    :param call: –û–∂–∏–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
    :param state: –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ text
    :return:
    """
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞'
    await state.update_data(description=call.message.text)
    await call.message.edit_text(text=text)
    await PageUpdate.description.set()


@dp.message_handler(state=PageUpdate.description)
async def run_sender(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID, –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
    :param message: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
    :param state: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    movie = await state.get_data()
    await state.update_data(description=message.text)
    await PageUpdate.description.set()
    await PageUpdate.next()
    movie = await state.get_data()
    movie_data = movie['json']
    info = f'–§–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏: {movie_data["title"]} \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {movie["description"]} ' \
           f'\r\n–¢—Ä–µ–π–ª–µ—Ä: {movie_data["trailer"]} \r\n–ü–æ—Å—Ç–µ—Ä: {movie_data["poster"]}'
    send_message = await message.answer(text=info, reply_markup=running)
    await send_message.edit_reply_markup(
        reply_markup=url_movies(SendMovie(movie['json'], movie['description']).run_sender()))
    await PageUpdate.json.set()


@dp.callback_query_handler(text_contains="run_sender", state=PageUpdate.json)
async def run_sender(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–∏—Ç–∏–Ω–≥ –Ω–∞ —Å–∞–π—Ç–µ
    –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º
    :param call: –ø–æ–ª—É—á–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    movie = await state.get_data()
    run = SendMovie(movie['json'], None).run_sender()
    await call.message.edit_reply_markup(reply_markup=running)
    await call.message.edit_reply_markup(reply_markup=url_movies(run))
    await PageUpdate.idkp.set()
