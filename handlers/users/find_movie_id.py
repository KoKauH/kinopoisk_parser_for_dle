from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiogram.dispatcher import FSMContext

from api.kp_cloud_api import FinderId
from keyboards.inline.choice_buttons import run_choice
from state.state import PageUpdate
from loader import dp


@dp.message_handler(Text(equals=["–ü–æ–∏—Å–∫ –ø–æ ID üîé"]), state="*")
async def keyboards(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É id –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞
    :param message: –ø–æ–ª—É—á–∞–µ—Ç id
    :param state: –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    text = '–í–≤–µ–¥–∏—Ç–µ ID –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞'
    await message.answer(text=text)
    await PageUpdate.idkp.set()


@dp.message_handler(state=PageUpdate.idkp)
async def find_movie(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID, –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
    :param message: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
    :param state: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    :return:
    """
    movie_data = FinderId(message.text, False).get_movie()
    await state.update_data(json=movie_data)
    try:
        info = f'–§–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏: {movie_data["title"]} \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {movie_data["description"]} ' \
               f'\r\n–¢—Ä–µ–π–ª–µ—Ä: {movie_data["trailer"]} \r\n–ü–æ—Å—Ç–µ—Ä: {movie_data["poster"]}'
    except TypeError:
        info = '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    if not info == '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ':
        await message.answer(text=info, reply_markup=run_choice)
    else:
        await message.answer(text=info)
    await PageUpdate.json.set()
