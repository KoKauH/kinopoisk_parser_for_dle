from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from api.kp_cloud_api import FinderTitle, FinderId
from keyboards.inline.callback_datas import movie_callback
from keyboards.inline.choice_buttons import type_choice, movie_list, run_choice
from state.state import DataUpdate
from loader import dp


@dp.message_handler(Text(equals=["–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé"]), state="*")
async def keyboards(message: Message):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ type_movie, –∏ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
    :param message: –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    """
    text = '–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å? üßê'
    await message.answer(text=text, reply_markup=type_choice)
    # –ê–≤—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ type_movie
    await DataUpdate.type_movie.set()


@dp.callback_query_handler(state=DataUpdate.type_movie)
async def keyboards(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
    :param call: –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    :param state: –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    """
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ callback_data –∏ –Ω–∞–∂–∞—Ç–æ–π –≤–Ω–æ–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ type_movie
    await state.update_data(type_movie=call.data)
    await DataUpdate.next()

    # –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
    await call.message.answer(text=text)
    # –ê–≤—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ title
    await DataUpdate.title.set()


@dp.message_handler(state=DataUpdate.title)
async def find_movie(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    :param message: –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    :param state: –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ type_movie
    type_movie = (await state.get_data())['type_movie']
    # –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    movie_data = FinderTitle(type_movie, message.text).get_list_movie()
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ–±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ movie_data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å None
    if movie_data:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ movie_data
        choice_movie_list = movie_list(movie_data)
        await message.answer(text='–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à–µ–ª:', reply_markup=choice_movie_list)
    else:
        # –í—ã–≤–æ–¥–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ–±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        await message.answer(text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ title
    await DataUpdate.title.set()


@dp.callback_query_handler(movie_callback.filter(item_name="movie"), state=DataUpdate.title)
async def buying_apples(call: CallbackQuery, state: FSMContext, callback_data: dict):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID, –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
    :param call: –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    :param state: –ü–µ—Ä–µ–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    :param callback_data: –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ—Ç id –∫–∏–Ω–ø–æ–∏—Å–∫–∞ –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    idkp = callback_data['id_button']
    # –ü–æ–ª—É—á–∞–µ—Ç –ø–æ id –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    movie_data = FinderId(idkp, False).get_movie()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    await state.update_data(json=movie_data)
    # –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞ TypeError –∏ –ø–æ–ª—å–∑–æ–≤–∞–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    # —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    try:
        info = f'–§–∏–ª—å–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏: {movie_data["title"]} \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {movie_data["description"]} ' \
               f'\r\n–¢—Ä–µ–π–ª–µ—Ä: {movie_data["trailer"]} \r\n–ü–æ—Å—Ç–µ—Ä: {movie_data["poster"]}'
        await call.message.answer(text=info, reply_markup=run_choice)
    except TypeError:
        info = '–ü–æ —ç—Ç–æ–º—É ID –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        await call.message.answer(text=info)
    # –ê–≤—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ json
    await DataUpdate.json.set()
